<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>D3.js Interactive Flowchart</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <style>
        .flowchart-demo {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
        }
        .node {
            cursor: move;
        }
        .link {
            fill: none;
            stroke: #999;
            stroke-width: 1.5px;
        }
        .arrowhead {
            fill: #999;
        }
    </style>
</head>
<body>
    <div id="flowchart-demo" class="flowchart-demo"></div>

    <script>
        // Define the diagram data
        const nodes = [
            { id: 1, type: "rectangle", label: "Rectangle 1", x: 50, y: 50, width: 150, height: 80 },
            { id: 2, type: "diamond", label: "Diamond", x: 250, y: 200, width: 100, height: 100 },
            { id: 3, type: "rectangle", label: "Rectangle 2", x: 50, y: 350, width: 150, height: 80 }
        ];

        const links = [
            { source: 1, target: 2 },
            { source: 2, target: 3 }
        ];

        // Set up the SVG
        const svg = d3.select("#flowchart-demo").append("svg")
            .attr("width", "100%")
            .attr("height", "100%");

        // Define arrow marker
        svg.append("defs").append("marker")
            .attr("id", "arrowhead")
            .attr("viewBox", "-0 -5 10 10")
            .attr("refX", 20)
            .attr("refY", 0)
            .attr("orient", "auto")
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("xoverflow", "visible")
            .append("svg:path")
            .attr("d", "M 0,-5 L 10 ,0 L 0,5")
            .attr("class", "arrowhead");

        // Create links
        const link = svg.selectAll(".link")
            .data(links)
            .enter().append("line")
            .attr("class", "link")
            .attr("marker-end", "url(#arrowhead)");

        // Create nodes
        const node = svg.selectAll(".node")
            .data(nodes)
            .enter().append("g")
            .attr("class", "node")
            .attr("transform", d => `translate(${d.x},${d.y})`)
            .call(d3.drag()
                .on("drag", dragged)
                .on("end", dragended));

        // Add shapes to nodes
        node.each(function(d) {
            if (d.type === "rectangle") {
                d3.select(this).append("rect")
                    .attr("width", d.width)
                    .attr("height", d.height)
                    .attr("fill", "#f0f0f0")
                    .attr("stroke", "#346789");
            } else if (d.type === "diamond") {
                d3.select(this).append("polygon")
                    .attr("points", `0,${d.height/2} ${d.width/2},0 ${d.width},${d.height/2} ${d.width/2},${d.height}`)
                    .attr("fill", "#f0f0f0")
                    .attr("stroke", "#346789");
            }
        });

        // Add labels to nodes
        node.append("text")
            .attr("text-anchor", "middle")
            .attr("dominant-baseline", "middle")
            .attr("transform", d => d.type === "diamond" ? "rotate(45)" : null)
            .attr("x", d => d.width / 2)
            .attr("y", d => d.height / 2)
            .text(d => d.label);

        // Define drag behavior
        function dragged(event, d) {
            d3.select(this).attr("transform", `translate(${d.x = event.x}, ${d.y = event.y})`);
            updateLinks();
        }

        function dragended(event, d) {
            updateLinks();
        }

        // Update link positions
        function updateLinks() {
            link
                .attr("x1", d => nodes[d.source - 1].x + nodes[d.source - 1].width / 2)
                .attr("y1", d => nodes[d.source - 1].y + nodes[d.source - 1].height / 2)
                .attr("x2", d => nodes[d.target - 1].x + nodes[d.target - 1].width / 2)
                .attr("y2", d => nodes[d.target - 1].y + nodes[d.target - 1].height / 2);
        }

        // Initial update of links
        updateLinks();
    </script>
</body>
</html>

